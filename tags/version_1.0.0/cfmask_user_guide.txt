User Guide for the Fmask C code

1. Overall Description:

 Fmask (Function of mask) is used for automated clouds, cloud shadows, and snow
masking for Landsat TM/ETM+ images developed by Zhe Zhu (zhuzhe@bu.edu) and 
Curtis E. Woodcock (curtis@bu.edu) at Center for Remote Sensing, Department of 
Earth and Environment, Boston University. Landsat Top of Atmosphere (TOA) 
reflectance and Brightness Temperature (BT) are used as inputs. Fmask first 
uses rules based on cloud physical properties to separate Potential Cloud 
Pixels (PCPs) and clearsky pixels. Next, a normalized temperature probability, 
spectral variability probability, and brightness probability are combined to 
produce a probability mask for clouds over land and water separately. Then, 
the PCPs and the cloud probability mask are used together to derive the 
potential cloud layer. The darkening effect of the cloud shadows in the Near 
Infrared (NIR) Band is used to generate a potential shadow layer by applying
the flood-fill transformation. Subsequently, 3D cloud objects are determined 
via segmentation of the potential cloud layer and assumption of a constant 
temperature lapse rate within each cloud object. The view angle of the 
satellite sensor and the illuminating angle are used to predict possible cloud 
shadow locations and select the one that has the maximum similarity with the 
potential cloud shadow mask. If the scene has snow, a snow mask is also 
produced (Zhu and Woodcock, 2012). Please also check the Fmask website at:
http://code.google.com/p/fmask/

Reference: 
Zhu, Z. and Woodcock, C. E., Object-based cloud and cloud shadow detection in 
Landsat imagery, Remote Sensing of Environment (2012), 
doi:10.1016/j.rse.2011.10.028 

2. Fmask Inputs/Outputs Description:

INPUTS: Right now Fmask takes LEDAPS outputs as inputs. Three files are needed
        from LEDAPS outputs which are generated by the first two steps in 
        LEDAPS runs (lndpm and lndcal):
	* Metadata file (*.carbon_met.txt)
	* Calibration input (lndcal.*.hdf)
	* Thermal input (lndth.*.hdf)
Only Metadata file is needed as command line argument to run the Fmask:
./cfmask <directory of meatadata file>/Metadata file (*.carbon_met.txt)

usage: fmask --metadata=input_metadata_filename_with_full_path --prob=input_cloud_probability_value --cldpix=input_cloud_pixel_buffer --sdpix=input_shadow_pixel_buffer [--write_binary] [--verbose]

where the following parameters are required:
    -metadata: name of the input metadata file (full path) output from LEDAPS

where the following parameters are optional:
    -prob: cloud_probability, default value is 22.5
    -cldpix: cloud_pixel_buffer for image dilate, default value is 3
    -sdpix: shadow_pixel_buffer for image dilate, default value is 3
    -write_binary: should raw binary outputs and ENVI header files be written in addition to the HDF file? (default is false)
    -verbose: should intermediate messages be printed? (default is false)

fmask --help will print the usage statement

Example: fmask --metadata= --metadata=/home/sguo/LEDAPS/ledaps-read-only/ledapsSrc/src/fmask2/L5010054_05420110312.metadata.txt --prob=22.5 --cldpix=3 --sdpix=3 --write_binary --verbose

OUTPUTS: Both a HDF fmask and a binary fmask with an envi header are created
         with Fmask run. In the output mask file, the pixel values are labeled
         as below:

cloud_pixel: 4
snow_pixel: 3
shadow_pixel: 2
water_pixel: 1
clear_pixel: 0
fill_pixel: 255

        
3. Fmask Module Description:

potential_cloud_shadow_snow_mask.c: A rewrite of the matlab plcloud.m code. It 
labels cloud pixels, snow pixels, water pixels, and potential shadow pixels.
The potential shadow pixels are a combination of shadow pixels, water pixels 
and clear land pixels and maybe even some cloud pixels. But as they are just
potential shadow pixels, they will be eventually identified as shadow pixels
when object_cloud_shadow_match routine is run. Therefore, the identification 
of potential shadow pixels is not critical as long as all real shadow pixels 
are labeled as part of the potetal shadow pixels. This is why a simple 
replacement of all pixels whose values are lower than the lower (17.5%) 
threshhold of cloud pixels with higher (82.5%) threshhold values are good
enough to make the trick for image fill in matlab code. 

object_cloud_shadow_match.c: A rewrite of the matlab fcssm.m code. It segments
the cloud pixels (labeling each cloud pixel with a number to make pixels within
one cloud have the same number) and identifies the final shadow pixels by 
getting the maximum cloud and shadow similarity from the geometric cloud/shadow
match. The object_cloud_shadow_match routine occupies more than 90% of 
execution time. In order to improve the execution speed, the cloud pixels
within each cloud segment are better linked through either a linked list or
child node in a tree structure. This part hasn't been implemented yet.
  
input.c : Read in TOA reflectance for bands 1-5 and 6 and Brightness 
Temperature (BT) for band 6 as well as all the needed metadata either from
HDF metadata header or from the LEDPAS generated metadata file.
output.c: Write out fmask in HDF format with a few metadata added to the 
header. 

Note: Now in the Fmask, the satu_value_max is calculated based on the same DN 
to TOA reflectance and DN to BT conversions when DN is 255. In Fmask, when any 
pixel value is 20000, it is replaced with the satu_value_max of the band 
calculated as above. Therefore, the actual satu_value_max values are used for 
each saturated pixle instead of 20000 in Fmask. The lndcal2 code actually set
saturated pixel values as satu_value_max values calculated above. Then the 
saturated pixel value replacement may not be needed in Fmask code, but it 
doesn't hurt to keep the replacement code in Fmask as it will simply do nothing
if the equivalent saturated TOA reflectance and BT values are saved in LEDAPS
output files instead of 20000 is saved. Our long-term goal is simply use 
LEDAPS output files as inputs to the Fmask directly after all constant updates 
are taken in place. 
